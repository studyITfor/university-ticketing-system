{
  "info": {
    "name": "University Ticketing System API",
    "description": "Complete API testing collection for the university ticketing system with real-time WebSocket functionality",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "System Health",
      "item": [
        {
          "name": "Get Socket.IO Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/socket-info",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "socket-info"]
            },
            "description": "Get information about Socket.IO connections"
          },
          "response": []
        },
        {
          "name": "Test Seat Update",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/test/emit-seat-update",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "emit-seat-update"]
            },
            "description": "Manually trigger a seat update event"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Seat Management",
      "item": [
        {
          "name": "Get All Seat Statuses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/seat-statuses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seat-statuses"]
            },
            "description": "Get current status of all seats"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Booking Management (Centralized)",
      "item": [
        {
          "name": "Create New Booking (Centralized)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john@university.edu\",\n  \"phone\": \"+1234567890\",\n  \"seatId\": \"1-1\",\n  \"table\": 1,\n  \"seat\": 1,\n  \"price\": 5900,\n  \"status\": \"pending\",\n  \"bookingDate\": \"2024-01-15T10:30:00.000Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/book",
              "host": ["{{baseUrl}}"],
              "path": ["api", "book"]
            },
            "description": "Create a new booking using the centralized API"
          },
          "response": []
        },
        {
          "name": "Get All Bookings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings"]
            },
            "description": "Get all bookings from centralized storage"
          },
          "response": []
        },
        {
          "name": "Get Bookings by Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/bookings?status=pending",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings"],
              "query": [
                {
                  "key": "status",
                  "value": "pending",
                  "description": "Filter by booking status (pending, confirmed, cancelled)"
                }
              ]
            },
            "description": "Get bookings filtered by status"
          },
          "response": []
        },
        {
          "name": "Get Single Booking",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings", "{{bookingId}}"]
            },
            "description": "Get a single booking by ID"
          },
          "response": []
        },
        {
          "name": "Confirm Booking",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"confirmedBy\": \"admin\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/bookings/{{bookingId}}/confirm",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings", "{{bookingId}}", "confirm"]
            },
            "description": "Confirm a booking (admin action)"
          },
          "response": []
        },
        {
          "name": "Update Booking",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"confirmed\",\n  \"metadata\": {\n    \"paymentDate\": \"2024-01-15T11:00:00.000Z\",\n    \"paymentConfirmedBy\": \"admin\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings", "{{bookingId}}"]
            },
            "description": "Update a booking"
          },
          "response": []
        },
        {
          "name": "Delete Booking",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings", "{{bookingId}}"]
            },
            "description": "Delete a booking by ID"
          },
          "response": []
        },
        {
          "name": "Sync Local Bookings",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookings\": {\n    \"local_123\": {\n      \"id\": \"local_123\",\n      \"firstName\": \"Jane\",\n      \"lastName\": \"Smith\",\n      \"email\": \"jane@university.edu\",\n      \"phone\": \"+1234567891\",\n      \"seatId\": \"2-1\",\n      \"table\": 2,\n      \"seat\": 1,\n      \"price\": 5900,\n      \"status\": \"pending\",\n      \"bookingDate\": \"2024-01-15T10:30:00.000Z\",\n      \"pendingSync\": true\n    }\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/sync-bookings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sync-bookings"]
            },
            "description": "Sync local bookings to centralized storage"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Legacy Booking Management",
      "item": [
        {
          "name": "Create New Booking (Legacy)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullName\": \"John Doe\",\n  \"email\": \"john@university.edu\",\n  \"phone\": \"+1234567890\",\n  \"ticketType\": \"standard\",\n  \"ticketCount\": 2,\n  \"selectedSeats\": [\"1-1\", \"1-2\"],\n  \"totalPrice\": 118\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/create-booking",
              "host": ["{{baseUrl}}"],
              "path": ["api", "create-booking"]
            },
            "description": "Create a new booking using legacy API (redirects to centralized)"
          },
          "response": []
        },
        {
          "name": "Confirm Payment (Legacy)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookingId\": \"{{bookingId}}\",\n  \"paymentMethod\": \"card\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/confirm-payment",
              "host": ["{{baseUrl}}"],
              "path": ["api", "confirm-payment"]
            },
            "description": "Confirm payment for a booking using legacy API"
          },
          "response": []
        },
        {
          "name": "Delete Booking (Legacy)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/delete-booking/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "delete-booking", "{{bookingId}}"]
            },
            "description": "Delete a booking by ID using legacy API (redirects to centralized)"
          },
          "response": []
        },
        {
          "name": "Get Bookings (Legacy JSON)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/bookings-legacy",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings-legacy"]
            },
            "description": "Get bookings from legacy JSON file storage"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Functions",
      "item": [
        {
          "name": "Admin Release All Seats",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"adminPassword\": \"admin123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/release-all-seats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "release-all-seats"]
            },
            "description": "Admin function to release all seats"
          },
          "response": []
        },
        {
          "name": "Admin Pre-book Seats (Manual)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"adminPassword\": \"admin123\",\n  \"seatIds\": [\"2-1\", \"2-2\", \"2-3\"],\n  \"prebookType\": \"manual\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/prebook-seats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "prebook-seats"]
            },
            "description": "Admin function to pre-book specific seats manually"
          },
          "response": []
        },
        {
          "name": "Admin Pre-book Seats (Random)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"adminPassword\": \"admin123\",\n  \"count\": 5,\n  \"prebookType\": \"random\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/admin/prebook-seats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "prebook-seats"]
            },
            "description": "Admin function to pre-book random seats"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Concurrency Testing",
      "item": [
        {
          "name": "Test Duplicate Booking (409 Conflict)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@university.edu\",\n  \"phone\": \"+1234567890\",\n  \"seatId\": \"1-1\",\n  \"table\": 1,\n  \"seat\": 1,\n  \"price\": 5900,\n  \"status\": \"pending\",\n  \"bookingDate\": \"2024-01-15T10:30:00.000Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/book",
              "host": ["{{baseUrl}}"],
              "path": ["api", "book"]
            },
            "description": "Test booking the same seat twice to trigger 409 conflict"
          },
          "response": []
        },
        {
          "name": "Test Concurrent Bookings",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Concurrent\",\n  \"lastName\": \"User\",\n  \"email\": \"concurrent@university.edu\",\n  \"phone\": \"+1234567891\",\n  \"seatId\": \"{{concurrentSeatId}}\",\n  \"table\": 2,\n  \"seat\": 1,\n  \"price\": 5900,\n  \"status\": \"pending\",\n  \"bookingDate\": \"2024-01-15T10:30:00.000Z\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/book",
              "host": ["{{baseUrl}}"],
              "path": ["api", "book"]
            },
            "description": "Test concurrent booking attempts (run multiple times simultaneously)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "WebSocket Testing",
      "item": [
        {
          "name": "Socket.IO Connection Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/socket.io/",
              "host": ["{{baseUrl}}"],
              "path": ["socket.io", ""]
            },
            "description": "Test Socket.IO endpoint availability"
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://your-app-name.railway.app",
      "disabled": false,
      "description": "Base URL for the deployed application"
    },
    {
      "key": "bookingId",
      "value": "BOOKING_ID_FROM_CREATE_RESPONSE",
      "disabled": false,
      "description": "Booking ID obtained from create booking response"
    },
    {
      "key": "concurrentSeatId",
      "value": "2-1",
      "disabled": false,
      "description": "Seat ID for concurrent testing"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.variables.get('baseUrl')) {",
          "    pm.variables.set('baseUrl', 'https://your-app-name.railway.app');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Log response for debugging",
          "console.log('Response Status:', pm.response.status);",
          "console.log('Response Body:', pm.response.text());",
          "",
          "// Basic response validation",
          "pm.test('Status code is successful', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
          "});",
          "",
          "// For booking creation, extract booking ID",
          "if ((pm.info.requestName === 'Create New Booking (Centralized)' || pm.info.requestName === 'Create New Booking (Legacy)') && pm.response.code === 201) {",
          "    const responseJson = pm.response.json();",
          "    if (responseJson.bookingId) {",
          "        pm.variables.set('bookingId', responseJson.bookingId);",
          "        console.log('Booking ID saved:', responseJson.bookingId);",
          "    }",
          "}",
          "",
          "// For 409 conflict testing",
          "if (pm.response.code === 409) {",
          "    console.log('✅ 409 Conflict detected - seat already booked (expected behavior)');",
          "    pm.test('Conflict response is correct', function () {",
          "        pm.expect(pm.response.code).to.equal(409);",
          "    });",
          "}"
        ]
      }
    }
  ]
}
